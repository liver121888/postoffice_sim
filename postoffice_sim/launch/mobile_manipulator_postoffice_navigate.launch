<?xml version="1.0"?>
<launch>
  <arg name="pose_initial_x" value="0"/>
  <arg name="pose_initial_y" value="0"/>
  <arg name="pose_initial_a" value="0"/>
  <arg name="pose_initial_z" value="1"/>

  <arg name="enable_pedsim" default="true"/>

  <!--CONTROLLED = 0, TELEOPERATION = 1, SOCIAL_DRIVE = 2-->
  <arg name="robot_mode" default="0"/>

  <arg name="kbd_teleop" default="false"/>
  <arg name="rqt_teleop" default="false"/>
  <arg name="visualize" default="true"/>
  <arg name="with_robot" default="true"/>
  <arg name="simulation_factor" default="1.0"/>
  <arg name="update_rate" default="30.0"/>
  <arg name="max_robot_speed" default="1.5"/>

  <arg name="map_enable" default="true"/>
  <arg name="map_path" default="$(find postoffice_sim)/maps/postoffice.yaml" />
  <group if="$(arg map_enable)">
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_path)"/>
  </group>

  <param name="robot_description" command="$(find xacro)/xacro $(find robot_description)/urdf/mobile_kinect_manipulator.urdf.xacro" />

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
	  <arg name="world_name" value="$(find postoffice_sim)/worlds/postoffice+packages.world"/>
  </include>

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -x $(arg pose_initial_x) -y $(arg pose_initial_y) -z $(arg pose_initial_z) -model mobile_manipulator" />
  
  <!-- Load the controller parameters onto the parameter server -->  
  <rosparam file="$(find mobile_manipulator_moveit_config)/config/gazebo_controllers.yaml" />

  <!--spawn controllers (controller_manager)-->
  <rosparam command="load" file="$(find robot_description)/config/arm_control.yaml" />
  <node name="controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller hand_controller" respawn="false" />
  <!--we do not use the spawner in moveit config, the config is not for our hardware interface specify in the urdf xacro-->
  <!-- <include file="$(find mobile_manipulator_moveit_config)/launch/ros_controllers.launch"/> -->

  <!-- Spawn the Gazebo ROS controllers -->
  <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" />


  <!-- Written in simulator.launch, so we use unless to prevent conflicts-->
  <group unless="$(arg enable_pedsim)">
    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" />
  </group>
  
  <include file="$(find mobile_manipulator_moveit_config)/launch/demo.launch">
    <!--in gazebo, should be fake, 
      but we use ros_control because other part of the fake config is already satisfied in other launch files-->
    <arg name="moveit_controller_manager" value="ros_control" />
    <arg name="use_rviz" value="false" />
  </include>  

  <rosparam command="load" file="$(find robot_description)/config/base_control.yaml" />
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="robot_base_joint_publisher robot_base_velocity_controller" />

  <!--Robot localization-->
  <node pkg="robot_localization" type="ekf_localization_node" name="footprint_to_odom_ekf"> 
      <remap from="odometry/filtered" to="odom" />
      <rosparam command="load" file="$(find postoffice_sim)/config/ekf/footprint_to_odom.yaml" />
  </node>

  <!-- Rviz -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find postoffice_sim)/rviz/postoffice.rviz" if="$(arg visualize)"/>

  <!--Has amcl+move_base-->
  <include file="$(find postoffice_sim)/launch/include/mobile_manipulator_move_base.launch.xml" >
    <arg name="pose_initial_x" value="$(arg pose_initial_x)"/>
    <arg name="pose_initial_y" value="$(arg pose_initial_y)"/>
    <arg name="pose_initial_theta" value="$(arg pose_initial_a)"/>
  </include>

  <!--Has relay cmd_vel for teleop if needed-->
  <node pkg="topic_tools" name="cmd_relay" type="relay" args="/cmd_vel /robot_base_velocity_controller/cmd_vel" />

  <group if="$(arg enable_pedsim)">
    <!-- Simulator -->
    <include file="$(find postoffice_sim)/launch/include/simulator.launch.xml">
      <arg name="kbd_teleop" value="$(arg kbd_teleop)"/>
      <arg name="rqt_teleop" value="$(arg rqt_teleop)"/>
      <arg name="scene_file" value="$(find postoffice_sim)scenarios/postoffice.xml"/>
      <arg name="with_robot" value="$(arg with_robot)"/>
      <arg name="simulation_factor" value="$(arg simulation_factor)"/>
      <arg name="update_rate" value="$(arg update_rate)"/>
      <arg name="default_queue_size" value="10"/>
      <arg name="max_robot_speed" value="$(arg max_robot_speed)"/>
      <arg name="robot_mode" value="$(arg robot_mode)"/>
      <!-- <arg name="robot_description" value="$(arg robot_description)"/> -->
      <arg name="enable_groups" value="true"/>
      <arg name="pose_initial_x" value="$(arg pose_initial_x)"/>
      <arg name="pose_initial_y" value="$(arg pose_initial_y)"/>
      <arg name="pose_initial_theta" value="$(arg pose_initial_a)"/>
    </include>

    <!-- Visualizer -->
    <include file="$(find pedsim_visualizer)/launch/visualizer.launch"/>

    <!-- Gazebo Agent Spawner -->
    <node name="gazebo_agent_spawner" pkg="pedsim_gazebo_plugin" type="spawn_pedsim_agents.py" />
  </group>

  <!--Darknet ROS-->
  <include file="$(find darknet_ros)/launch/darknet_ros.launch">
    <arg name="launch_prefix" default=""/>
    <arg name="image" default="/camera/color/image_raw" />
    <arg name="yolo_weights_path"          default="$(find darknet_ros)/yolo_network_config/weights"/>
    <arg name="yolo_config_path"           default="$(find darknet_ros)/yolo_network_config/cfg"/>
    <arg name="ros_param_file"             default="$(find darknet_ros)/config/ros.yaml"/>
    <arg name="network_param_file"         default="$(find darknet_ros)/config/yolov3.yaml"/>
  </include>
  
  <!--override value in $(find darknet_ros)/config/ros.yaml-->
  <param name="/darknet_ros/image_view/enable_console_output" value="false" />

</launch>
